#!/bin/bash

help() {
([ -t 1 ] && pager || cat) <<!

USAGE:

  $0 queue list
    list all existing JMS queues

  $0 queue pause <queuenames>
    pause one or several queues, messages will become invisible to consumers
    until the queue is resumed
    e.g. $0 queue pause DLQ,ExpiryQueue

  $0 queue resume <queuenames>
    resume one or several queues
    e.g. $0 queue resume DLQ

  $0 queue create <queuenames>
    create new JMS durable queues
    e.g. $0 queue create foo

  $0 queue destroy <queuenames>
    destroy existing JMS queues
    e.g. $0 queue destroy foo

  $0 queue purge <queuenames>
    remove all messages from given JMS queues
    e.g. $0 queue purge ExpiryQueue

  $0 message list [-f <filter>] <queuenames>
    list all messages currently in given JMS queues
    e.g. $0 queue list DLQ

  $0 message first <queuenames>
    list first message currently in given JMS queues
    e.g. $0 message first DLQ

  $0 message count [-f <filter>] [<queuenames>]
    give current message count in given JMS queues, or in every queue if no
    queue name is specified
    e.g. $0 message count
         $0 message count DLQ -f "_HQ_ORIG_QUEUE = 'jms.queue.FOOBAR'"

  $0 message remove [-f <filter>] <queuenames>
    remove messages from given JMS queues
    e.g. $0 message remove FOOBAR
         $0 message remove DLQ -f "_HQ_ORIG_QUEUE = 'jms.queue.FOOBAR'"

  $0 message move [-f <filter>] <queuenames> <targetqueuename>
    move messages from given JMS queues to another queue
    e.g. $0 message move QUEUE1 QUEUE2
         $0 message move DLQ foo -f "_HQ_ORIG_QUEUE = 'jms.queue.foo'"

ENVIRONMENT:

  environment variable HORNETQ_JMX_URL must be set
    e.g. export HORNETQ_JMX_URL="service:jmx:rmi:///jndi/rmi://localhost:5444/jmxrmi"

!
exit 1
}

jmxsi() {
  java -cp /usr/share/java/jmxsi.jar:.:target/classes:jmxsi.jar com.hallowyn.jmxsi.JmxShellInterface "$@"
}

jsonformat() {
  sed -r 's/(\{|\]|,)/\1\n/g;s/(\},?)/\n\1/g'
}

# options:
#   -q quoted
queueformat() {
case "$1" in
-q)
  sed 's/^"jms.queue.//;s/"$//;s/":/:/'
;;
*)
  sed 's/^jms.queue.//'
;;
esac
}

if [ -z "$HORNETQ_JMX_URL" ]; then
  cat << !
Error: HORNETQ_JMX_URL not set
  environment variable HORNETQ_JMX_URL must be set
    e.g. export HORNETQ_JMX_URL="service:jmx:rmi:///jndi/rmi://localhost:5444/jmxrmi"
!
exit 1
fi

SCOPE="$1"
COMMAND="$2"
[ "$#" -ge 2 ] && shift 2
OBJECTS=
SECONDARY=

while [ -n "$1" ]; do
case "$1" in
-f)
  shift
  FILTER="$1"
;;
*)
  if [ -z "$OBJECTS" ]; then
    OBJECTS="${1/,/ }"
  else
    SECONDARY="$1"
  fi
;;
esac
[ "$#" -gt 0 ] && shift  
done

case "$SCOPE.$COMMAND" in
queue.pause)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" 'pause()' -o "$QUEUE paused" | queueformat
  done
;;
queue.resume)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" 'resume()' -o "$QUEUE resumed" | queueformat
  done
;;
queue.list)
  jmxsi lsobj "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,*" %name | queueformat
;;
queue.create)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Server" 'createQueue(java.lang.String,java.lang.String,boolean)' -o "$QUEUE created" "$QUEUE" "$QUEUE" true | queueformat
  done
;;
queue.destroy)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Server" 'destroyQueue(java.lang.String)' -o "$QUEUE destroyed" "$QUEUE" | queueformat
  done
;;
queue.purge)
  [ -n "$OBJECTS" -a -z "$FILTER" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" "removeMessages(java.lang.String)" -o "$QUEUE: %Result messages removed" "" | queueformat
  done
;;

message.list)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" "listMessagesAsJSON(java.lang.String)" "$FILTER" | jsonformat
  done
;;
message.first)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi get "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" FirstMessageAsJSON %Value | jsonformat
  done
;;
message.count)
  if [ -n "$OBJECTS" ]; then
    for QUEUE in $OBJECTS; do
      [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
      jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" "countMessages(java.lang.String)" -o "$QUEUE: %Result" "$FILTER" | queueformat
    done
  else
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,*" "countMessages(java.lang.String)" -o "%name: %Result" "$FILTER" | queueformat -q
  fi
;;
message.remove)
  [ -n "$OBJECTS" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" "removeMessages(java.lang.String)" -o "$QUEUE: %Result messages removed" "$FILTER" | queueformat
  done
;;
message.move)
  [ -n "$OBJECTS" -a -n "$SECONDARY" ] || help
  for QUEUE in $OBJECTS; do
    [[ "$QUEUE" =~ ^jms.queue.* ]] || QUEUE="jms.queue.$QUEUE"
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"$QUEUE\",*" "moveMessages(java.lang.String,java.lang.String)" -o "$QUEUE: %Result messages moved" "$FILTER" "$SECONDARY" | queueformat
  done
;;
*)
  help
;;
esac
