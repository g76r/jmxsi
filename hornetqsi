#!/bin/bash

help() {
cat <<!
usage:
  $0 queue list
    list all existing JMS queues
  $0 queue pause <queuenames>
    pause one or several queues, messages will become invisible to consumers
    until the queue is resumed
    e.g. $0 queue pause DLQ,ExpiryQueue
  $0 queue resume <queuenames>
    resume one or several queues
    e.g. $0 queue resume DLQ
  $0 queue create <queuenames>
    create new JMS durable queues
    e.g. $0 queue create foo
  $0 queue destroy <queuenames>
    destroy existing JMS queues
    e.g. $0 queue destroy foo
  $0 queue purge <queuenames>
    remove all messages from given JMS queues
    e.g. $0 queue purge ExpiryQueue
  $0 message list <queuenames>
    list all messages currently in given JMS queues
    e.g. $0 queue list DLQ
  $0 message first <queuenames>
    list first message currently in given JMS queues
    e.g. $0 message first DLQ
  $0 message count [<queuenames>]
    give current message count in given JMS queues, or in every queue if no
    queue name is specified
    e.g. $0 message count
         $0 message count DLQ

environment:
  environment variable HORNETQ_JMX_URL must be set
    e.g. export HORNETQ_JMX_URL="service:jmx:rmi:///jndi/rmi://localhost:5444/jmxrmi"
!
exit 1
}

jmxsi() {
  java -cp .:target/classes:jmxsi.jar com.hallowyn.jmxsi.JmxShellInterface "$@"
}

jsonformat() {
  sed -r 's/(\{|\]|,)/\1\n/g;s/(\},?)/\n\1/g'
}

queueformat() {
  sed 's/^"jms.queue.//;s/"$//;s/":/:/'
}

SCOPE="$1"
COMMAND="$2"
OBJECTS="${3/,/ }"
[ "$#" -ge 2 ] && shift 2
case "$SCOPE.$COMMAND" in
queue.pause)
  for QUEUE in $OBJECTS; do
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"jms.queue.$QUEUE\",*" 'pause()' -o "$QUEUE paused"
  done
;;
queue.resume)
  for QUEUE in $OBJECTS; do
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"jms.queue.$QUEUE\",*" 'resume()' -o "$QUEUE resumed"
  done
;;
queue.list)
  jmxsi lsobj "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,*" %name | queueformat
;;
queue.create)
  for QUEUE in $OBJECTS; do
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Server" 'createQueue(java.lang.String,java.lang.String,boolean)' -o "$QUEUE created" "jms.queue.$QUEUE" "jms.queue.$QUEUE" true
  done
;;
queue.destroy)
  for QUEUE in $OBJECTS; do
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Server" 'destroyQueue(java.lang.String)' -o "$QUEUE destroyed" "jms.queue.$QUEUE"
  done
;;
queue.purge)
  for QUEUE in $OBJECTS; do
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"jms.queue.$QUEUE\",*" 'removeMessages(java.lang.String)' -o "$QUEUE purged from %Result messages" ''
  done
;;
message.list)
  for QUEUE in $OBJECTS; do
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"jms.queue.$QUEUE\",*" 'listMessagesAsJSON(java.lang.String)' '' | jsonformat
  done
;;
message.first)
  for QUEUE in $OBJECTS; do
    jmxsi get "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"jms.queue.$QUEUE\",*" FirstMessageAsJSON %Value | jsonformat
  done
;;
message.count)
  if [ -n "$OBJECTS" ]; then
    for QUEUE in $OBJECTS; do
      jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,name=\"jms.queue.$QUEUE\",*" 'countMessages(java.lang.String)' -o "%name: %Result" '' | queueformat
    done
  else
    jmxsi invoke "$HORNETQ_JMX_URL" "org.hornetq:module=Core,type=Queue,*" 'countMessages(java.lang.String)' -o "%name: %Result" '' | queueformat
  fi
;;
*)
  help
;;
esac
